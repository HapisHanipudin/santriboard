generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  l
  p
}

enum PlanType {
  timeline
  stepline
  mayor_agenda
  minor_routine
}

enum Field {
  TAHFIZH
  IT
  KARAKTER
  BAHASA
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  FAMILY
}

enum TeacherRole {
  ASATIDZ
  KADIV
}


model Users {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  password      String
  type          Role           @default(STUDENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  teacher       Teachers?
  student       Students?      @relation("UserToStudent", fields: [studentId], references: [id])
  studentId     Int?           @unique  // One-to-one relation with Students
  family        Families?      @relation("UserToFamily", fields: [familyId], references: [id])
  familyId      Int?           @unique  // One-to-one relation with Families
  refreshTokens RefreshToken[]
}




model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      Users     @relation(fields: [userId], references: [id])
}

model Teachers {
  id        String      @id @default(cuid())
  name      String
  userId    String      @unique
  user      Users       @relation(fields: [userId], references: [id])
  type      TeacherRole @default(ASATIDZ)
  nik       String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  notes     Notes[]
  divisions TeacherDivisions[]
  classes   TeacherClasses[]
}

model Notes {
  id          Int      @id @default(autoincrement())
  student_id  Int
  teacher_id  String
  notes       String?
  type        Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  student     Students  @relation(fields: [student_id], references: [id])
  teacher     Teachers  @relation(fields: [teacher_id], references: [id])
}

model PlpStudents {
  id          Int       @id @default(autoincrement())
  student_id  Int
  plp_id      Int
  semester_id Int

  student     Students  @relation(fields: [student_id], references: [id])
  plp         Plps      @relation(fields: [plp_id], references: [id])
  semester    Semesters @relation(fields: [semester_id], references: [id])

  @@unique([student_id, plp_id, semester_id])
}

model Behaviors {
  id         Int      @id @default(autoincrement())
  student_id Int
  value      Int
  type       String?

  student    Students @relation(fields: [student_id], references: [id])
}

model Plans {
  id         Int      @id @default(autoincrement())
  student_id Int
  title      String
  created_at DateTime
  updated_at DateTime

  plan_details PlanDetails[]
  student      Students @relation(fields: [student_id], references: [id])
}

model PlanDetails {
  id         Int      @id @default(autoincrement())
  plan_id    Int
  type       PlanType
  content    String
  created_at DateTime
  updated_at DateTime

  plan       Plans    @relation(fields: [plan_id], references: [id])
}

model Divisions {
  id        String   @id @default(cuid())
  name      Field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes   Classes[]
  teachers  TeacherDivisions[]
}

model TeacherDivisions {
  id         String      @id @default(cuid())
  teacherId  String
  divisionId String
  role       TeacherRole @default(ASATIDZ)
  createdAt  DateTime    @default(now())

  teacher    Teachers    @relation(fields: [teacherId], references: [id])
  division   Divisions   @relation(fields: [divisionId], references: [id])

  @@unique([teacherId, divisionId])
}

model Classes {
  id         String          @id @default(cuid())
  name       String
  divisionId String
  division   Divisions       @relation(fields: [divisionId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  teachers   TeacherClasses[]
  students   StudentClasses[]
}

model TeacherClasses {
id         String    @id @default(cuid())
  teacherId  String    // Hapus @unique jika banyak ke satu
  classId    String
  semesterId Int
  createdAt  DateTime  @default(now())

  semester   Semesters @relation(fields: [semesterId], references: [id])
  teacher    Teachers  @relation(fields: [teacherId], references: [id])
  class      Classes   @relation(fields: [classId], references: [id])

  @@unique([teacherId, classId])

}

model Families {
  id          Int      @id @default(autoincrement())
  kk          String   @unique
  father_name String
  mother_name String
  father_job  String?
  mother_job  String?
  children    Int
  address     String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  students    Students[]    // relasi yang tepat ke Students
  user        Users?        @relation("UserToFamily")  // perbaikan nama relasi
}


model Students {
  id           Int      @id @default(autoincrement())
  title        String? 
  level        Int?
  Pondok        Int?
  SekolahPayung String?
  familiesId   Int?
  nik          String?  @unique
  nis          String?  @unique
  name         String
  nickname     String?
  gender       Gender?
  birth_date   DateTime?
  birth_place  String?
  birth_order  Int?
  school       String?
  height       Int?
  weight       Int?
  photo        String?
  is_active    Boolean
  is_graduated Boolean
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  families      Families?        @relation(fields: [familiesId], references: [id])
  grade_students GradeStudents[]
  notes          Notes[]
  behaviors      Behaviors[]
  plans          Plans[]
    achievements Achievements[] // Relation to achievements
  projects     Projects[] // Relation to projects
  plp_students   PlpStudents[]
    evaluations  Evaluations[]  // Relation to Evaluations model
  classes      StudentClasses[]  // Relation to StudentClasses model
  user           Users?          @relation("UserToStudent")  // perbaikan nama relasi
}

model Achievements {
  id         Int      @id @default(autoincrement())
  title      String
  description String
  studentId  Int
  createdAt  DateTime @default(now())

  student    Students  @relation(fields: [studentId], references: [id])
}


model Projects {
  id         Int      @id @default(autoincrement())
  title      String
  description String
  imageUrl   String?
  studentId  Int

  student    Students  @relation(fields: [studentId], references: [id])
}


model Grades {
  id     Int      @id @default(autoincrement())
  grade  String
  type   String?

  grade_students GradeStudents[]

  @@unique([grade, type])
}

model Semesters {
  id       Int      @id @default(autoincrement())
  semester Int
  period   String

  Teacher_Classes  TeacherClasses[]
  grade_students   GradeStudents[]
  plp_students     PlpStudents[]
  classes_student StudentClasses[] // Relation to

  @@unique([semester, period])
}

model Plps {
  id   Int      @id @default(autoincrement())
  plp  String?
  type String?

  plp_students PlpStudents[]

  @@unique([plp, type])
}

model GradeStudents {
  id          Int        @id @default(autoincrement())
  student_id  Int
  grade_id    Int
  semester_id Int

  student     Students   @relation(fields: [student_id], references: [id])
  grade       Grades     @relation(fields: [grade_id], references: [id])
  semester    Semesters  @relation(fields: [semester_id], references: [id])

  @@unique([student_id, grade_id, semester_id])
}

model Evaluations {
   id        Int      @id @default(autoincrement())
  field     Field
  score     Int
  studentId Int      // Hapus @unique jika banyak ke satu
  student   Students  @relation(fields: [studentId], references: [id])
}



model StudentClasses {
id          String     @id @default(cuid())
  studentId   Int        // Hapus @unique untuk relasi banyak ke satu
  classId     String
  semesterId  Int
  createdAt   DateTime   @default(now())

  semester    Semesters  @relation(fields: [semesterId], references: [id])
  student     Students   @relation(fields: [studentId], references: [id])
  class       Classes    @relation(fields: [classId], references: [id])

  @@unique([studentId, classId])

}



