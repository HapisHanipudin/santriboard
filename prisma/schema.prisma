generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum NotificationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Frequency {
  HARIAN    // Daily
  MINGGUAN  // Weekly
  BULANAN   // Monthly
}


enum Gender {
p
 l
}

enum ProjectStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum PlanType {
  timeline
  stepline
  mayor_agenda
  minor_routine
}

enum Field {
  TAHFIZH
  IT
  KARAKTER
  BAHASA
}

enum Role {
  ADMIN
  USER
  TEACHER
  STUDENT
  PARENT
}

enum TeacherRole {
  ASATIDZ
  KADIV
}
enum Division {
  TAHFIZH
  IT
  BAHASA
  KARAKTER
}




model Users {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  type      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher       Teachers?
  student       Students?
  parent        Parents?
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  revoked   Boolean  @default(false)
  user      Users    @relation(fields: [userId], references: [id])
}

model Teachers {
  id                String                @id @default(cuid())
  name              String
  nik               String                @unique
  userId            String?               @unique
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // <-- tambahkan ini (atau ganti nama field lama)
  teacherDivisions  TeacherDivisions[]    

  user              Users?                @relation(fields: [userId], references: [id])
  notes             Notes[]
  classes           TeacherClasses[]
  notifications     Notifications[]
  projects          Projects[]
}



model Assessment {
  id               Int               @id @default(autoincrement())
  studentClassesId String
  type             AssessmentType
  frequency        Frequency

  score            Int
  note             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  detail           AssessmentDetail? 
  studentClass     StudentClasses    @relation(fields: [studentClassesId], references: [id])
}

model AssessmentDetail {
  id               Int          @id @default(autoincrement())
  page             String?
  pageCount        Int?
  bahasaAspect     String?
  karakterAspect   String?
  itTopic          String?
  completion       Int?         // Add this field

  assessment       Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  assessmentId     Int          @unique
}




enum AssessmentType {
  
  TAHFIZH
  BAHASA_ARAB
  BAHASA_INGGRIS
  BAHASA_PDKI
  KARAKTER
  IT
}



model Notifications {
  id        String             @id @default(cuid())
  title     String
  message   String
  status    NotificationStatus @default(PENDING)
  studentId String
  teacherId String?
  projectId String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  student Students @relation(fields: [studentId], references: [id])
  teacher Teachers? @relation(fields: [teacherId], references: [id])
  project Projects? @relation(fields: [projectId], references: [id])
}

model Notes {
  id         String   @id @default(cuid())
  studentId  String
  teacherId  String
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  student    Students @relation(fields: [studentId], references: [id])
  teacher    Teachers @relation(fields: [teacherId], references: [id])
}

model Behaviors {
  id         String   @id @default(cuid())
  studentId  String
  type       String?
  value      Int

  student    Students @relation(fields: [studentId], references: [id])
}

// Plans and details
model Plans {
  id         String       @id @default(cuid())
  studentId  String
  title      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  student      Students      @relation(fields: [studentId], references: [id])
  planDetails  PlanDetails[] @relation("PlanToDetails")
}


model PlanDetails {
  id         String    @id @default(cuid())
  planId     String
  type       PlanType
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  plan       Plans     @relation(fields: [planId], references: [id], name: "PlanToDetails")
}

model Divisions {
  id        String               @id @default(cuid())
  name      Field
  icon      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  // relasi ke 
  classes           Classes[]             
  teacherDivisions  TeacherDivisions[]   
}

model TeacherDivisions {
  id          String      @id @default(cuid())
  teacherId   String
  divisionId  String
  role        TeacherRole @default(ASATIDZ)
  createdAt   DateTime    @default(now())

  teacher     Teachers    @relation(fields: [teacherId], references: [id])
  division    Divisions   @relation(fields: [divisionId], references: [id])

  @@unique([teacherId, divisionId])
}

// Classes
model Classes {
  id         String    @id @default(cuid())
  name       String

  divisionId String
  division   Divisions @relation(fields: [divisionId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  teachers   TeacherClasses[]
  students   StudentClasses[]
}

model TeacherClasses {
  id         String   @id @default(cuid())
  teacherId  String
  classId    String
  semesterId String
  createdAt  DateTime @default(now())

  teacher    Teachers @relation(fields: [teacherId], references: [id])
  class      Classes  @relation(fields: [classId], references: [id])
  semester   Semesters @relation(fields: [semesterId], references: [id])

  @@unique([teacherId, classId, semesterId])
}

model Families {
  id          String   @id @default(cuid())
  kk          String   @unique
  father_name String
  mother_name String
  father_job  String?
  mother_job  String?
  children    Int
  address     String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  childrens Students[] // relasi yang tepat ke Students
  parents   Parents[]
}

model Parents {
  id        String   @id @default(cuid())
  name      String

  userId    String   @unique
  familyId  String
  user      Users    @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  family Families? @relation(fields: [familyId], references: [id])
}



model Students {
  id            String    @id @default(cuid())
  level         Int?
  Pondok        Int?
  SekolahPayung String?
  familiesId    String?
  nis           String?   @unique
  name          String
  nickname      String?
  gender        Gender?
  birth_date    String?
  birth_place   String?
  birth_order   Int?
  school        String?
  height        Int?
  weight        Int?
  photo         String?
  is_active     Boolean
  is_graduated  Boolean
  userId        String?   @unique
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())

  user           Users?           @relation(fields: [userId], references: [id])
  notifications Notifications[] // Ditambahkan

  family         Families?        @relation(fields: [familiesId], references: [id])
  grade_students GradeStudents[]
  notes          Notes[]
  behaviors      Behaviors[]
  plans          Plans[]
  achievements   Achievements[] // Relation to achievements
  projects       Projects[] // Relation to projects
  classes        StudentClasses[] // Relation to StudentClasses model
}

model Score {
  id        String    @id @default(uuid())
  studentClassesId String
  type      ScoreType
  value     Float
  date      DateTime  @default(now())

  class StudentClasses @relation(references: [id], fields: [studentClassesId])
}

enum ScoreType {
  DAILY_EXAM
  INITIATIVE
  WEEKLY_EXAM
  MONTHLY
}

model Achievements {
  id                String   @id @default(cuid())
  title             String
  description       String
  certificateImage  String?
  certificatePdf    String?
  studentId         String
  createdAt         DateTime @default(now())

  student            Students @relation(fields: [studentId], references: [id])
}

model Projects {
  id            String          @id @default(cuid())
  title         String
  description   String
    imageUrl    String? // Pastikan ada kolom ini
  proposalUrl   String?
  studentId     String
  teacherId     String?
  status        ProjectStatus   @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  student       Students        @relation(fields: [studentId], references: [id])
  teacher       Teachers?       @relation(fields: [teacherId], references: [id])
  notifications Notifications[]
}
model Grades {
  id            String  @id @default(cuid())
  grade         String
  type          String?

  gradeStudents GradeStudents[]

  @@unique([grade, type])
}

model Semesters {
  id              String            @id @default(cuid())
  semester        Int
  period          String

  teacherClasses  TeacherClasses[]
  gradeStudents   GradeStudents[]
  studentClasses  StudentClasses[]

  @@unique([semester, period])
}

model GradeStudents {
  id          String    @id @default(cuid())
  studentId   String
  gradeId     String
  semesterId  String

  student    Students   @relation(fields: [studentId], references: [id])
  grade      Grades     @relation(fields: [gradeId], references: [id])
  semester   Semesters  @relation(fields: [semesterId], references: [id])

  @@unique([studentId, gradeId, semesterId])
}


model Evaluations {
  id               String           @id @default(cuid())
  studentClassesId String
  field            Division
  score            Int

  studentClass    StudentClasses   @relation(fields: [studentClassesId], references: [id])
}



model StudentClasses {
  id         String    @id @default(cuid())
  studentId  String
  classId    String
  semesterId String
  createdAt  DateTime  @default(now())

  student    Students   @relation(fields: [studentId], references: [id])
  class      Classes    @relation(fields: [classId], references: [id])
  semester   Semesters  @relation(fields: [semesterId], references: [id])
  scores    Score[]
  evaluations Evaluations[]
  assesment   Assessment[]
  @@unique([studentId, classId, semesterId])
}

